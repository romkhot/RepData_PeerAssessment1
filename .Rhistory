library(swirl)
install.packages("swirl")
library(swirl)
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
swirl()
swirl()
cd d:/
setwd d:/
setwd("D:/Program_Files/R")
library(plyr)
library(ggplot2)
setwd(dir = "D:\\DOCs\\COURSERA\\5 - Reproducible Research\\CP1\\RepData_PeerAssess1")
install.packages("knitr")
install.packages("rmarkdown")
knit2html()
library( knitr)
knit2html()
knit2html(input = "PA1_template.Rmd", output = "PA1_template_.html")
---
keep_md: yes
output: html_document
---
# Reproducible Research: Peer Assessment 1
By **romkhot**
## Loading and preprocessing the data
Loading necessary packages and set working directory:
```{r echo=TRUE}
library(plyr)
library(ggplot2)
setwd(dir = "D:\\DOCs\\COURSERA\\5 - Reproducible Research\\CP1\\RepData_PeerAssess1")
```
Unzip and read source data:
```{r echo=TRUE, eval=TRUE}
unzip('activity.zip')
activity_data <- read.csv('activity.csv', header=TRUE, sep = ',')
str(activity_data)
```
Cast the **date** variable as a *Date* datatype :
```{r echo=TRUE, eval=TRUE}
activity_data$date <- as.Date( activity_data$date, format = '%Y-%m-%d' )
str(activity_data$date)
```
## What is mean total number of steps taken per day?
Summarize the data with groupping by **date**:
```{r echo=TRUE, eval=TRUE }
sum_data <- ddply( activity_data, .(date),
summarize,
sum_steps = sum(steps) )
head(sum_data)
```
Vizualize **sum_data** using ggplot:
```{r histogram, echo=TRUE, eval=TRUE }
sum_data_plot <- ggplot(sum_data, aes(x = sum_steps))
sum_data_plot <- sum_data_plot + geom_histogram( aes(fill = ..count..),
binwidth = ceiling(max(sum_data$sum_steps, na.rm = TRUE)/30) )
sum_data_plot <- sum_data_plot + theme_bw() + xlab("Number of steps")
print(sum_data_plot)
```
Calculate mean and median:
```{r echo=TRUE, eval=TRUE }
c(summary(sum_data$sum_steps)['Mean'], summary(sum_data$sum_steps)['Median'])
```
## What is the average daily activity pattern?
Get the averages needed for the plot:
```{r echo=TRUE, eval=TRUE }
avg_data <- ddply( activity_data, .(interval),
summarize,
avg_steps = mean(steps, na.rm=TRUE) )
head(avg_data)
```
Plot the **avg_data** data:
```{r plot, echo=TRUE, eval=TRUE }
avg_data_plot <- ggplot(avg_data, aes(interval, avg_steps))
avg_data_plot <- avg_data_plot + geom_line()
avg_data_plot <- avg_data_plot + theme_light() + ylab("Number of steps")
print(avg_data_plot)
```
Get the maximum:
```{r echo=TRUE, eval=TRUE }
summary(avg_data$avg_steps)['Max.']
```
**Conclusion 1**
*Looks like activity is usually higher on the weekends, particularly in
the middle of the day. In the weekend morning just after waking activity
is lower than  usually.*
## Imputing missing values
Count the rows that have NA value:
```{r echo=TRUE, eval=TRUE}
table( complete.cases(activity_data) )
```
Impute missing values using interval averages and the **match** function.
```{r echo=TRUE, eval=TRUE}
activity_data_imp <- activity_data
activity_data_imp$steps <- ifelse( is.na(activity_data_imp$steps),
avg_data$avg_steps[match(activity_data_imp$interval, avg_data$interval) ],
activity_data_imp$steps )
table( complete.cases(activity_data_imp) )
```
Summarize imputed data:
```{r echo=TRUE, eval=TRUE }
sum_data_imp <- ddply( activity_data_imp, .(date), summarize, sum_steps = sum(steps) )
head(sum_data_imp)
```
Plot a histogram for imputed data:
```{r imputed.histogram, echo=TRUE, eval=TRUE }
sum_imp_plot <- ggplot(sum_data_imp, aes(x = sum_steps))
sum_imp_plot <- sum_imp_plot + geom_histogram(aes(fill = ..count..),
binwidth = ceiling(max(sum_data_imp$sum_steps, na.rm = TRUE)/30) )
sum_imp_plot <- sum_imp_plot + theme_bw() + xlab("Number of steps")
print(sum_imp_plot)
```
Get  the mean and median of imputed data:
```{r echo=TRUE, eval=TRUE }
c(summary(sum_data_imp$sum_steps)['Mean'], summary(sum_data_imp$sum_steps)['Median'])
```
As we can see, now the histogram is a closer approximation of the Gaussian distribution, the mean and median are equivalent.
## Are there differences in activity patterns between weekdays and weekends?
Define the lists of weekdays and weekends:
```{r echo=TRUE, eval=TRUE}
w_days <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
w_ends <- c('Saturday', 'Sunday')
```
Extend the **activity_data** with the **week_part** as a factor variable:
```{r echo=TRUE, eval=TRUE}
activity_data$day <- weekdays(activity_data$date)
activity_data$week_part <- ifelse(activity_data$day %in% w_days, 'Week-Day', 'Week-End')
activity_data$is_weekend <- ifelse(activity_data$day %in% w_days, FALSE, TRUE)
head(activity_data)
table(activity_data$week_part)
```
Prepare the data for plotting:
```{r echo=TRUE, eval=TRUE }
avg_data_wend <- ddply( activity_data,
.(interval, week_part),
summarize,
avg_steps = mean(steps, na.rm=TRUE) )
head(avg_data_wend)
```
Plot in two facets using **week_part** as a factor variable:
```{r facet.plot, echo=TRUE, eval=TRUE }
avg_data_wend_plot <- ggplot(avg_data_wend, aes(interval, avg_steps) )
avg_data_wend_plot <- avg_data_wend_plot + geom_line() + theme_light()
avg_data_wend_plot <- avg_data_wend_plot + facet_grid(week_part ~ .)
avg_data_wend_plot <- avg_data_wend_plot + xlab("Interval") + ylab("Number of steps")
avg_data_wend_plot <- avg_data_wend_plot + ggtitle("Mean steps over each interval with splitting by weekday/weekend")
print(avg_data_wend_plot)
```
**Conclusion 2**
*Looks like activity is usually higher on the weekends, particularly in
the middle of the day. In the weekend morning just after waking activity
is lower than  usually.*
summary(avg_data$avg_steps)['Max.']
avg_data[avg_data$avg_steps == summary(avg_data$avg_steps)['Max.']]
summary(avg_data$avg_steps)['Max.']
avg_data[avg_data$avg_steps == summary(avg_data$avg_steps)['Max.'],]
summary(avg_data$avg_steps)['Max.']
avg_data[, avg_data$avg_steps == summary(avg_data$avg_steps)['Max.']]
(avg_data$avg_steps)
avg_data$avg_steps
max(avg_data$avg_steps)
avg_data[, avg_data$avg_steps == max(avg_data$avg_steps)]
avg_data[avg_data$avg_steps == max(avg_data$avg_steps)]
avg_data[avg_data$avg_steps == max(avg_data$avg_steps),]
summary(avg_data$avg_steps)['Max.']
avg_data[avg_data$avg_steps == max(avg_data$avg_steps),]
xxx <- sort(avg_data)
xxx
summary(avg_data$avg_steps)['Max.']
avg_data[avg_data$avg_steps == max(avg_data$avg_steps),]
xxx <- sort(avg_data$avg_steps)
xxx
summary(avg_data$avg_steps)['Max.']
avg_data[avg_data$avg_steps == max(avg_data$avg_steps),]
xxx <- sort(avg_data$avg_steps, decreasing = TRUE)
xxx
summary(avg_data$avg_steps)['Max.']
avg_data[avg_data$avg_steps == max(avg_data$avg_steps),]
xxx <- sort(avg_data$avg_steps, decreasing = TRUE)
xxx
